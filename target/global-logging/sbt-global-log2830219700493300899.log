[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_302)
[debug]       Load.loadUnit: plugins took 141.2651ms
[debug]       Load.loadUnit: defsScala took 0.5115ms
[debug] [Loading] Scanning directory C:\Users\ragav\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.3854 ms
[debug]           Load.resolveProject(global-plugins) took 67.2928ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ragav\.sbt\1.0\plugins, plugins: List(<none>))) took 136.5039ms
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 168.9304ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5457ms
[debug]     Load.loadUnit(file:/C:/Users/ragav/.sbt/1.0/plugins/, ...) took 323.2919ms
[debug]   Load.apply: load took 579.1294ms
[debug]   Load.apply: resolveProjects took 9.4753ms
[debug]   Load.apply: finalTransforms took 65.2262ms
[debug]   Load.apply: config.delegates took 10.8563ms
[debug]   Load.apply: Def.make(settings)... took 523.2693ms
[debug]   Load.apply: structureIndex took 121.0579ms
[debug]   Load.apply: mkStreams took 2.338ms
[info] loading global plugins from C:\Users\ragav\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4093.8776ms
[debug]           Load.loadUnit: plugins took 27.8463ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\ragav\Downloads\cs441_homework2\project
[debug]             Load.loadUnit: mkEval took 7.4762ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\Downloads\cs441_homework2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.2744 ms
[info] loading settings for project cs441_homework2-build from assembly.sbt,idea1.sbt ...
[debug]               Load.resolveProject(cs441_homework2-build) took 7.6679ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cs441_homework2-build, base: C:\Users\ragav\Downloads\cs441_homework2\project, plugins: List(<none>))) took 12.8136ms
[debug] [Loading] Done in C:\Users\ragav\Downloads\cs441_homework2\project, returning: (cs441_homework2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4932.0765ms
[debug]           Load.loadUnit: cleanEvalClasses took 17.5674ms
[debug]         Load.loadUnit(file:/C:/Users/ragav/Downloads/cs441_homework2/project/, ...) took 4978.7975ms
[debug]       Load.apply: load took 4980.8698ms
[debug]       Load.apply: resolveProjects took 0.2201ms
[debug]       Load.apply: finalTransforms took 41.7387ms
[debug]       Load.apply: config.delegates took 1.0634ms
[debug]       Load.apply: Def.make(settings)... took 338.6958ms
[debug]       Load.apply: structureIndex took 78.4812ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\ragav\Downloads\cs441_homework2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9872.8554ms
[debug]     Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\ragav\Downloads\cs441_homework2
[debug]       Load.loadUnit: mkEval took 0.3499ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\Downloads\cs441_homework2, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.6161 ms
[info] loading settings for project cs441_homework2 from build.sbt ...
[debug]         Load.resolveProject(cs441_homework2) took 48.6175ms
[debug]       Load.loadTransitive: finalizeProject(Project(id cs441_homework2, base: C:\Users\ragav\Downloads\cs441_homework2, plugins: List(<none>))) took 54.1615ms
[debug] [Loading] Done in C:\Users\ragav\Downloads\cs441_homework2, returning: (cs441_homework2)
[debug]     Load.loadUnit: loadedProjectsRaw took 3393.2618ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.9324ms
[debug]   Load.loadUnit(file:/C:/Users/ragav/Downloads/cs441_homework2/, ...) took 13286.9739ms
[debug] Load.apply: load took 13289.3112ms
[debug] Load.apply: resolveProjects took 0.1264ms
[debug] Load.apply: finalTransforms took 36.3767ms
[debug] Load.apply: config.delegates took 0.4428ms
[debug] Load.apply: Def.make(settings)... took 83.1775ms
[debug] Load.apply: structureIndex took 24.7543ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to WordCount (in build file:/C:/Users/ragav/Downloads/cs441_homework2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52825 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52825, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordCount (in build file:/C:/Users/ragav/Downloads/cs441_homework2/)
[debug] > Exec(idea-shell, None, None)
