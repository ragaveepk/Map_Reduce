[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_302)
[debug]       Load.loadUnit: plugins took 129.2142ms
[debug]       Load.loadUnit: defsScala took 0.4837ms
[debug] [Loading] Scanning directory C:\Users\ragav\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.0462 ms
[debug]           Load.resolveProject(global-plugins) took 66.7174ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ragav\.sbt\1.0\plugins, plugins: List(<none>))) took 116.2158ms
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 158.9459ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3141ms
[debug]     Load.loadUnit(file:/C:/Users/ragav/.sbt/1.0/plugins/, ...) took 298.264ms
[debug]   Load.apply: load took 604.5172ms
[debug]   Load.apply: resolveProjects took 5.0397ms
[debug]   Load.apply: finalTransforms took 61.4016ms
[debug]   Load.apply: config.delegates took 9.8742ms
[debug]   Load.apply: Def.make(settings)... took 375.2986ms
[debug]   Load.apply: structureIndex took 114.7559ms
[debug]   Load.apply: mkStreams took 2.1843ms
[info] loading global plugins from C:\Users\ragav\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3658.3259ms
[debug]           Load.loadUnit: plugins took 19.6162ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\ragav\IdeaProjects\WordCount\project
[debug]             Load.loadUnit: mkEval took 5.6831ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2246 ms
[info] loading settings for project wordcount-build from assembly.sbt,idea.sbt ...
[debug]               Load.resolveProject(wordcount-build) took 2.7002ms
[debug]             Load.loadTransitive: finalizeProject(Project(id wordcount-build, base: C:\Users\ragav\IdeaProjects\WordCount\project, plugins: List(<none>))) took 5.4598ms
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount\project, returning: (wordcount-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2298.6595ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.7319ms
[debug]         Load.loadUnit(file:/C:/Users/ragav/IdeaProjects/WordCount/project/, ...) took 2324.8747ms
[debug]       Load.apply: load took 2326.3035ms
[debug]       Load.apply: resolveProjects took 0.1481ms
[debug]       Load.apply: finalTransforms took 8.7941ms
[debug]       Load.apply: config.delegates took 0.4666ms
[debug]       Load.apply: Def.make(settings)... took 75.6672ms
[debug]       Load.apply: structureIndex took 43.1109ms
[debug]       Load.apply: mkStreams took 0.0063ms
[info] loading project definition from C:\Users\ragav\IdeaProjects\WordCount\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5048.7773ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\ragav\IdeaProjects\WordCount
[debug]       Load.loadUnit: mkEval took 0.2296ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6582 ms
[info] loading settings for project wordcount from build.sbt ...
[debug]         Load.resolveProject(wordcount) took 30.8487ms
[debug]       Load.loadTransitive: finalizeProject(Project(id wordcount, base: C:\Users\ragav\IdeaProjects\WordCount, plugins: List(<none>))) took 33.4269ms
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount, returning: (wordcount)
[debug]     Load.loadUnit: loadedProjectsRaw took 1676.8406ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.5312ms
[debug]   Load.loadUnit(file:/C:/Users/ragav/IdeaProjects/WordCount/, ...) took 6735.5689ms
[debug] Load.apply: load took 6736.9856ms
[debug] Load.apply: resolveProjects took 0.1042ms
[debug] Load.apply: finalTransforms took 19.213ms
[debug] Load.apply: config.delegates took 0.2975ms
[debug] Load.apply: Def.make(settings)... took 60.6811ms
[debug] Load.apply: structureIndex took 21.4983ms
[debug] Load.apply: mkStreams took 0.0051ms
[info] set current project to WordCount (in build file:/C:/Users/ragav/IdeaProjects/WordCount/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58500 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58500, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordCount (in build file:/C:/Users/ragav/IdeaProjects/WordCount/)
[debug] > Exec(idea-shell, None, None)
