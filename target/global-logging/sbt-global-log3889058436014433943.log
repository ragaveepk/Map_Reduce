[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ragav\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_302)
[debug]       Load.loadUnit: plugins took 263.6996ms
[debug]       Load.loadUnit: defsScala took 0.8999ms
[debug] [Loading] Scanning directory C:\Users\ragav\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 59.1185 ms
[debug]           Load.resolveProject(global-plugins) took 151.5436ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ragav\.sbt\1.0\plugins, plugins: List(<none>))) took 312.4951ms
[debug] [Loading] Done in C:\Users\ragav\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 402.5931ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7095ms
[debug]     Load.loadUnit(file:/C:/Users/ragav/.sbt/1.0/plugins/, ...) took 687.2853ms
[debug]   Load.apply: load took 1213.3083ms
[debug]   Load.apply: resolveProjects took 17.9172ms
[debug]   Load.apply: finalTransforms took 165.1426ms
[debug]   Load.apply: config.delegates took 20.9967ms
[debug]   Load.apply: Def.make(settings)... took 1034.2823ms
[debug]   Load.apply: structureIndex took 229.3515ms
[debug]   Load.apply: mkStreams took 3.472ms
[info] loading global plugins from C:\Users\ragav\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5936.9944ms
[debug]           Load.loadUnit: plugins took 41.1585ms
[debug]           Load.loadUnit: defsScala took 0.0063ms
[debug] [Loading] Scanning directory C:\Users\ragav\IdeaProjects\WordCount\project
[debug]             Load.loadUnit: mkEval took 11.2547ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.0642 ms
[info] loading settings for project wordcount-build from assembly.sbt,idea2.sbt ...
[debug]               Load.resolveProject(wordcount-build) took 9.0703ms
[debug]             Load.loadTransitive: finalizeProject(Project(id wordcount-build, base: C:\Users\ragav\IdeaProjects\WordCount\project, plugins: List(<none>))) took 14.0432ms
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount\project, returning: (wordcount-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4193.7677ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.8761ms
[debug]         Load.loadUnit(file:/C:/Users/ragav/IdeaProjects/WordCount/project/, ...) took 4245.4022ms
[debug]       Load.apply: load took 4247.7078ms
[debug]       Load.apply: resolveProjects took 0.207ms
[debug]       Load.apply: finalTransforms took 16.409ms
[debug]       Load.apply: config.delegates took 0.6741ms
[debug]       Load.apply: Def.make(settings)... took 124.7102ms
[debug]       Load.apply: structureIndex took 43.4812ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\ragav\IdeaProjects\WordCount\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9039.8321ms
[debug]     Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\Users\ragav\IdeaProjects\WordCount
[debug]       Load.loadUnit: mkEval took 1.8246ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.8128 ms
[info] loading settings for project wordcount from build.sbt ...
[debug]         Load.resolveProject(wordcount) took 47.8822ms
[debug]       Load.loadTransitive: finalizeProject(Project(id wordcount, base: C:\Users\ragav\IdeaProjects\WordCount, plugins: List(<none>))) took 53.7772ms
[debug] [Loading] Done in C:\Users\ragav\IdeaProjects\WordCount, returning: (wordcount)
[debug]     Load.loadUnit: loadedProjectsRaw took 4646.4992ms
[debug]     Load.loadUnit: cleanEvalClasses took 21.2082ms
[debug]   Load.loadUnit(file:/C:/Users/ragav/IdeaProjects/WordCount/, ...) took 13708.5926ms
[debug] Load.apply: load took 13710.64ms
[debug] Load.apply: resolveProjects took 0.1121ms
[debug] Load.apply: finalTransforms took 39.5985ms
[debug] Load.apply: config.delegates took 0.6504ms
[debug] Load.apply: Def.make(settings)... took 101.1493ms
[debug] Load.apply: structureIndex took 38.0428ms
[debug] Load.apply: mkStreams took 0.0058ms
[info] set current project to WordCount (in build file:/C:/Users/ragav/IdeaProjects/WordCount/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50087 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50087, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordCount (in build file:/C:/Users/ragav/IdeaProjects/WordCount/)
[debug] > Exec(idea-shell, None, None)
